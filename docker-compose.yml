version: '3.8'

services:
  # TerraLedger Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=True
      - DATABASE_URL=sqlite:///./terraledger.db
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - terraledger-network

  # TerraGold Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_HEDERA_NETWORK=testnet
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - terraledger-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - terraledger-network

  # PostgreSQL database (production alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=terraledger
      - POSTGRES_USER=terraledger
      - POSTGRES_PASSWORD=terraledger_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - terraledger-network

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - terraledger-network
    profiles:
      - production

volumes:
  backend_data:
  redis_data:
  postgres_data:

networks:
  terraledger-network:
    driver: bridge
